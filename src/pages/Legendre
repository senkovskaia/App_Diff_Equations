# 1_Legendre.py

import streamlit as st
import sympy as sp
import numpy as np
from sympy import symbols, Function, Eq
import plotly.graph_objs as go

# Set up the page configuration
st.set_page_config(page_title="Legendre's Differential Equation Solver", layout='wide')

# Title and description
st.title("Solving Legendre's Differential Equation via Power Series Method")

st.markdown("""
This interactive app allows you to explore the solution of Legendre's differential equation using the power series method. You can compute the coefficients of the series, plot the solution, and visualize the convergence.
""")

# Sidebar inputs
st.sidebar.header("Input Parameters")

# Degree of the polynomial n
n_value = st.sidebar.number_input("Degree of Legendre Polynomial (n)", min_value=0, max_value=20, value=2, step=1)

# Number of terms N in the series expansion
N_terms = st.sidebar.number_input("Number of Terms in Series Expansion (N)", min_value=2, max_value=100, value=10, step=1)

# Initial coefficients a0 and a1
a0 = st.sidebar.number_input("Initial Coefficient a₀ (for even solutions)", value=1.0)
a1 = st.sidebar.number_input("Initial Coefficient a₁ (for odd solutions)", value=0.0)

# Interactive Coefficient Computation
st.header("1. Interactive Coefficient Computation")

# Function to compute symbolic coefficients
def compute_symbolic_coefficients(n_sym, N_terms, a0_sym, a1_sym):
    a_sym = {}
    a_sym[0] = a0_sym
    a_sym[1] = a1_sym
    coefficients = []

    for m in range(0, int(min(N_terms, 10))):
        if m + 2 <= N_terms:
            a_m = a_sym.get(m, 0)
            numerator = (m**2 + m - n_sym*(n_sym + 1)) * a_m
            denominator = (m + 2)*(m + 1)
            if denominator != 0:
                a_m2 = sp.simplify(numerator / denominator)
            else:
                a_m2 = 0
            a_sym[m + 2] = a_m2
            coefficients.append({'m': m + 2, 'a_m': a_m2})
    return a_sym, coefficients

# Convert initial coefficients to SymPy Rationals
a0_sym = sp.Rational(a0)
a1_sym = sp.Rational(a1)

# Compute symbolic coefficients
n_sym = sp.Symbol('n')
a_sym, coefficients_sym = compute_symbolic_coefficients(n_sym, N_terms, a0_sym, a1_sym)

# Display symbolic coefficients in LaTeX
st.subheader("Symbolic Coefficients (up to 10 terms)")
for coef in coefficients_sym:
    m = coef['m']
    a_m = coef['a_m']
    st.latex(f"a_{{{m}}} = {sp.latex(a_m)}")

# Function to compute numerical coefficients
def compute_numeric_coefficients(n_value, N_terms, a0, a1):
    a_numeric = {}
    a_numeric[0] = a0
    a_numeric[1] = a1
    for m in range(0, int(N_terms)):
        if m + 2 <= N_terms:
            a_m = a_numeric.get(m, 0)
            numerator = (m**2 + m - n_value*(n_value + 1)) * a_m
            denominator = (m + 2)*(m + 1)
            if denominator != 0:
                a_m2 = numerator / denominator
            else:
                a_m2 = 0
            a_numeric[m + 2] = a_m2
    return a_numeric

# Compute numerical coefficients
a_numeric = compute_numeric_coefficients(n_value, N_terms, a0, a1)

# Display numerical coefficients in a table
#st.subheader("Computed Numerical Coefficients")
coefficients_numeric = [{'m': m, 'a_m': a_m} for m, a_m in a_numeric.items()]
#st.table(coefficients_numeric)

# Construct the symbolic series expression
x_sym = sp.Symbol('x')
series_expr = sum(a_sym.get(m, 0) * x_sym**m for m in range(0, int(min(N_terms, 10)) + 1))
st.subheader("Series Solution (Symbolic, up to 10 terms)")
st.latex(f"y(x) = {sp.latex(series_expr)}")

# Plotting the Solution
st.header("2. Plotting the Solution")

# Function to compute approximate solution
def approximate_solution(x_values, coefficients):
    y_values = np.zeros_like(x_values)
    for m, a_m in coefficients.items():
        y_values += a_m * x_values**m
    return y_values

# Generate x values
x_vals = np.linspace(-1, 1, 400)

# Compute y values
y_vals = approximate_solution(x_vals, a_numeric)

# Plot approximate solution
fig = go.Figure()
fig.add_trace(go.Scatter(x=x_vals, y=y_vals, mode='lines', name='Approximate Solution'))

# Plot exact Legendre polynomial if n is integer
if n_value == int(n_value):
    x_sym = sp.Symbol('x')
    Pn = sp.legendre(int(n_value), x_sym)
    Pn_func = sp.lambdify(x_sym, Pn, 'numpy')
    y_exact = Pn_func(x_vals)
    fig.add_trace(go.Scatter(x=x_vals, y=y_exact, mode='lines', name=f'Exact Pₙ(x)'))

fig.update_layout(title='Approximate Solution vs. Exact Solution',
                  xaxis_title='x',
                  yaxis_title='y(x)',
                  legend_title='Legend')

st.plotly_chart(fig)

# Visualizing the Convergence
st.header("3. Visualizing the Convergence")

st.write("""
Adjust the number of terms in the series expansion using the slider below to see how the approximation converges to the exact solution.
""")

# Slider for number of terms
N_convergence = st.slider("Number of Terms for Convergence Visualization", min_value=2, max_value=100, value=int(N_terms), step=1)

# Recompute numerical coefficients for convergence visualization
a_convergence = compute_numeric_coefficients(n_value, N_convergence, a0, a1)

# Compute y values for convergence visualization
y_convergence = approximate_solution(x_vals, a_convergence)

# Update plot for convergence
fig_convergence = go.Figure()
fig_convergence.add_trace(go.Scatter(x=x_vals, y=y_convergence, mode='lines', name=f'Approximation with N={N_convergence}'))

if n_value == int(n_value):
    fig_convergence.add_trace(go.Scatter(x=x_vals, y=y_exact, mode='lines', name=f'Exact Pₙ(x)'))

fig_convergence.update_layout(title='Convergence Visualization',
                              xaxis_title='x',
                              yaxis_title='y(x)',
                              legend_title='Legend')

st.plotly_chart(fig_convergence)

# Optionally, show the error between approximate and exact solutions
if n_value == int(n_value):
    st.subheader("Error Analysis")
    error = np.abs(y_convergence - y_exact)
    fig_error = go.Figure()
    fig_error.add_trace(go.Scatter(x=x_vals, y=error, mode='lines', name='Absolute Error'))
    fig_error.update_layout(title='Absolute Error between Approximate and Exact Solutions',
                            xaxis_title='x',
                            yaxis_title='Error',
                            legend_title='Legend')
    st.plotly_chart(fig_error)
