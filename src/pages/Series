import streamlit as st
import time
import numpy as np
import sys
import sympy as sp
from sympy.core.relational import Equality
from solutions.parsing import string_to_sympy_eq
from solutions.series import get_dserivatives
import time

st.set_page_config(page_title="Series", page_icon="")

st.markdown("# Series")
st.sidebar.header("Series")
st.write(
    """This page shows solutions using series"""
)

# User input for the equation
equation_input = st.text_input("Enter a differential equation in a form of ...", "(x-1)*y'' - x*y' + y = 0") #"y'' + y' + y = exp(x)")

x = sp.symbols('x')
y = sp.Function('y')

if equation_input:
    print(equation_input)
    # Convert the input string to a SymPy equation
    try:
        sympy_eq = string_to_sympy_eq(equation_input)

        free_symbols = list(sympy_eq.free_symbols)
        if len(free_symbols) > 1 or free_symbols[0] != x:
            sympy_eq = "Thre should be only one variable - 'x', and the function name should be 'y'"
    except:    
        sympy_eq = "Can't parse your input"
    
    # Display the equation in LaTeX format
    st.write("Equation:")
    st.latex(sp.latex(sympy_eq))

    if type(sympy_eq) == Equality:
        try:
            solution = sp.dsolve(sympy_eq, y(x))
            st.write("Solution:")
        except:
            solution = " The given DE cannot be solved by the factorable group method"
        st.latex(sp.latex(solution))


n = st.number_input("Enter the order of the expansion (n)", min_value=1, max_value=10, value=5)
a = sp.symbols(f'a0:{n}')
a = list(a)


if n and type(sympy_eq) == Equality:

    order = sp.ode_order(sympy_eq, y(x))

    derivatives = get_derivatives(order, n)
    der_0 = derivatives[0]
    print("der_0", der_0)
    #der_0 = sp.nsimplify(der_0, rational=True)  # Ensure no floating-point   
    #der_0 = sp.collect(der_0, (x - x0))
    st.write("Series:")
    st.latex(f"""y = {sp.latex(der_0)}""")

    substituted_ode = sympy_eq
    for i in range(order + 1):
        substituted_ode = substituted_ode.subs(sp.diff(y(x), x, i), derivatives[i])

    st.write("substituted_ode:")
    st.latex(f"""{sp.latex(substituted_ode)}""")

    left = sp.collect(substituted_ode.lhs.doit().expand(), x)
    st.write("Left side:")
    st.latex(f"""{sp.latex(left)}""")

    right = sp.series(substituted_ode.rhs, x, n=n).removeO()
    #right = sp.nsimplify(right, rational=True)

    st.write("Right side:")
    st.latex(f"""{sp.latex(right)}""")

    total = left - right
    collected_total = sp.collect(total, x)
    st.write("Collected:")

    collected_total = sp.collect(collected_total, x)

    st.latex(f"""{sp.latex(collected_total)}""")

    coefficients = sp.solve([collected_total.coeff(x, i) for i in range(n)], dict=True)[0]

    for c in a:
        if c not in coefficients.keys():
            coefficients[c] = 0

    all_values_zero: bool = all(value == 0 for value in coefficients.values())

    if not all_values_zero:
        st.write("Coefficients:")
        st.latex(f"""{sp.latex(coefficients)}""")

        der_0_substituted = der_0.subs(coefficients)
        st.latex(f"""y = {sp.latex(der_0_substituted)}""")

    else:
        text_input = st.text_input("Enter coefficients for derivatives separated by comma, e.g. for y(0) = 1, y'(0) = 0 enter 1, 0 ðŸ‘‡", 
                                  value = "1, 0", placeholder="1, 0")
        
        text_input = text_input.replace(' ', '').split(",")
        text_input = [float(i) for i in text_input]

        if len(text_input) != order:
            st.write(f"Insufficient initial conditions: Need {order}, but got {len(text_input)}")

        for i, key in enumerate(coefficients.keys()):
            if i < len(text_input):
                coefficients[key] = text_input[i]
        
        st.latex(f"""{sp.latex(coefficients)}""")   

        substituted_coef = collected_total

        coefficients_keys = list(coefficients.keys())
        for i in range(len(text_input)):
            substituted_coef = substituted_coef.subs(coefficients_keys[i], text_input[i])

        st.write("substituted_coef:")
        st.latex(f"""{sp.latex(substituted_coef)}""")      

        st.latex(f"""{sp.latex(substituted_coef.free_symbols)}""")      

        coefficients_input = sp.solve([substituted_coef.coeff(x, i) for i in range(n-len(text_input))], dict=True)[0]

        st.write("coefficients_input:")
        st.latex(f"""{sp.latex(coefficients_input)}""")

        coefficients_input_list = text_input.copy()

        coefficients_input_list.extend(list(coefficients_input.values()))

        st.latex(f"""{sp.latex(coefficients_input_list)}""")

        for i, c in enumerate(a):
            print(i, c)
            coefficients[c] = coefficients_input_list[i]

        st.write("Coefficients:")
        st.latex(f"""{sp.latex(coefficients)}""")
        

        der_0_substituted = der_0.subs(coefficients)
        st.latex(f"""y = {sp.latex(der_0)}""")
        st.latex(f"""y = {sp.latex(der_0_substituted)}""")


### y'' + y'  - 2(2x**2 - x - 1)y = 0
    
       


